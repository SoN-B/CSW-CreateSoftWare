내가푼 풀이----------------------------------------
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <algorithm>
using namespace std;

int main()
{
	vector<string> Str;
	string str;
	int T;
	cin >> T;

	Str.resize(T+1);
	for (int i = 0; i < T+1; i++) { //문자열자체 뒤집기
		getline(cin, str);
		reverse(str.begin(), str.end());
		Str[i] = str;
	}

	/*
	vector <string> words;
	string word;
	int j = 0;

	for (int i = 0; i < T; i++)
	{
		istringstream ss(Str[i]);
		Str[i].clear();
		while (getline(ss, word, ' ')) //공백 단위로 구분
		{
			words.push_back(word);
		}
	}

	for (int i = 0; i < T; i++)
	{
		Str[i].append(
			for(int i = 0;i<)
		);
		j = words[i].size();
	}*/


	for (int i = 0; i < T+1; i++) cout << Str[i] << endl;

	return 0;
}


남이푼 풀이----------------------------------------
#include<iostream>
#include<string>
#include<stack>
 
using namespace std;
 
int main()
{
    int T;        //테스트 케이스
    string sentence;    //문장 (길이 최대 1000) 단어길이: 20
    stack <char> st;    //단어를 뒤집기 위한 스택
 
    cin >> T;
    cin.ignore();    //버퍼 비우기(정수입력 --> 문자입력일시, 버퍼비우기 필수)
    while (T--)
    {
        getline(cin, sentence);
        sentence += ' ';//마지막도 공백을 인식하고 뒤집기를 수행하기위해
 
        for (int i = 0; i < sentence.size(); i++)
        {
            if (sentence[i] == ' ')
            {
                while (!st.empty())
                {
                    cout << st.top();
                    st.pop();
                }cout << ' ';
            }
            else 
                st.push(sentence[i]);
        }cout << "\n";
    }
 
}
